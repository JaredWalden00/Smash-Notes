@page "/posts/{stringid}"
@inject TestLogin.Client.Services.Blog.IBlogService BlogService
@inject TestLogin.Client.Services.Auth.IAuthRepository AuthRepository
@inject TestLogin.Client.Services.Char.ICharacterService CharacterService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@using Markdig
@using TestLogin.Shared.Dto.Blog

<style>
    .form-group-container {
        background-color: #f0f0f0;
        padding: 10px;
        border-radius: 5px;
    }

</style>

@if (CurrentPost == null)
{
    <span>Getting that blog post from the service...</span>
}
else
{
    @if (!EditRecord)
    {
        <div class="container-fluid">
            <div class="row" style="padding: 0 10px; background-color: #DFDFDF;">
                <div class="col-10">
                    <h2>@CurrentPost.Title</h2>
                </div>
                

            </div>

            <div class="row" style="padding: 0 10px; background-color: #DFDFDF;">
                <div class="col-12">
                    <h5>
                        @if (ExistingCharacters != null)
                        {
                            @foreach (var character in ExistingCharacters)
                            {
                                @if (ExistingCharacters.IndexOf(character) == ExistingCharacters.Count - 1)
                                {
                                    @character.Name
                                }
                                else
                                {
                                    @($"{character.Name}, ")
                                }
                            }
                        }
                    </h5>

                </div>
            </div>



        <div class="row">
                <div class="col-12" style="height: 80vh; background-color:white; overflow-y: auto;">
                    <div style="word-wrap: break-word;">
                        @((MarkupString)Markdown.ToHtml(@CurrentPost.Content))
                    </div>
            </div>
        </div>
        </div>
    }
}

@code {
    private GetBlogPostDto CurrentPost = new GetBlogPostDto();

    [Parameter]
    public string? stringid { get; set; }

    public bool EditRecord = false;

    private List<Character> ExistingCharacters = new List<Character>();

    public List<int> ExistingCharacterIds { get; set; } = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        if (stringid != null)
        {
            int Id = int.Parse(stringid);
            var response = await BlogService.GetBlogPostById(Id); //gets blogpost
            if (response.Success)
            {
                if (response.Data != null)
                {
                    CurrentPost = response.Data;
                }
            }

            var charlist = await CharacterService.GetBlogPostCharactersById(Id); //gets characters of the blogpost
            if (charlist.Success)
            {
                if (charlist.Data != null)
                {
                    ExistingCharacters = charlist.Data; //used in line 42
                }
            }
        }
        else
        {
            //handle where stringid is null
        }
    }
}