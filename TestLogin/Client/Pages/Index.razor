@page "/"
@inject TestLogin.Client.Services.Blog.IBlogService BlogService
@inject TestLogin.Client.Services.Auth.IAuthRepository AuthRepository
@inject TestLogin.Client.Services.Char.ICharacterService CharacterService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@using Markdig

<div class="container-fluid">
    <div class="row mb-2" style="height: 90vh;">
        <div class="col-sm-10 d-flex flex-column" style="height: 100%; background-image: url('928292.jpg'); background-size: cover; background-color:#E4E4E4;">
            <div class="row flex-nowrap overflow-auto" style="background-color:dimgray;">
                <div class="col-sm-12">
                    <h5 style="color:white;">General <a style="color:white;" href="General">></a></h5>
                </div>
            </div>
            <div class="row" style="flex: 1; overflow-y: auto;">
                @foreach (var post in blogPosts)
                {
                    <div class="custom-card" style="height: 35vh;">
                        <div class="card shadow" style="height: 100%;" @onclick='() => NavManager.NavigateTo($"posts/{post.Id}")'>
                            <img class="card-img-top">
                            <div class="card-body" style="flex: 1; overflow: hidden;">
                                <h5 class="card-title">@post.Title</h5>
                                <h6 class="card-subtitle mb-3 text-muted">
                                    <span>
                                        @foreach (var character in post.Characters)
                                        {
                                            @if (post.Characters.IndexOf(character) == post.Characters.Count - 1)
                                            {
                                                @character.Name
                                            }
                                            else
                                            {
                                                @($"{character.Name}, ")
                                            }
                                        }
                                    </span>
                                </h6>
                                <div style="word-wrap: break-word;">
                                    @((MarkupString)Markdown.ToHtml(@post.Content))
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>


        </div>

        <div class="col-sm-2" style="height: 100%; background-color:#484848; display: flex; flex-direction: column;">
            <input type="text" @oninput="HandleSearchInput" placeholder="Search characters" style="max-height: 10%">
            <div class="column" style="overflow-y: auto; flex-grow: 1;">
                @foreach (var character in filteredCharacters)
                {
                    <a>
                        <div class="charcard" style="background-color: #E4E4E4;" @onclick="() => CharcardClicked(character.Id)">
                            <img src="SmashIcons/@(character.Name).png" alt="Card Image">
                            <div class="charcard-text">
                                @character.Name
                            </div>
                        </div>
                    </a>
                }
            </div>
        </div>


    </div>
</div>



@code {
    private List<GetBlogPostDto> blogPosts = new List<GetBlogPostDto>();
    string placeholderImage = "https://via.placeholder.com/1060x180";
    private string searchText = "";
    private List<Character> Characters = new List<Character>();
    private List<Character> postsCharacters = new List<Character>();
    private List<Character> postCharacters = new List<Character>();

    List<Character> filteredCharacters = new List<Character>();

    public async Task CharcardClicked(int characterId)
    {
        var response = await CharacterService.GetBlogPostsByCharacterId(characterId);
        if (response.Success)
        {
            blogPosts = response.Data;
            await LoadCharactersForBlogPosts();
            StateHasChanged();
        }
        else
        {

        }
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        string searchInput = e.Value.ToString().ToLower();

        if (!string.IsNullOrWhiteSpace(searchInput))
        {
            filteredCharacters = Characters.Where(character => character.Name.ToLower().Contains(searchInput)).ToList();
        }
        else
        {
            filteredCharacters = Characters;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBlogPosts();
        await LoadCharactersForBlogPosts();
        AuthRepository.LoggedIn += LoadBlogPosts;
        AuthRepository.LoggedOut += OnLogOut;
    }

    public async Task<ServiceResponse<List<Character>>> GetCharactersForPostAsync(int id)
    {
        return await CharacterService.GetBlogPostCharactersById(id);
    }

    private async Task LoadBlogPosts()
    {
        var response = await BlogService.GetAllBlogPosts();
        if (response.Success)
        {
            blogPosts = response.Data;
            StateHasChanged();
        }
        else
        {

        }
    }

    private async Task LoadCharactersForBlogPosts()
    {
        Characters = await CharacterService.GetAllCharacters();
        filteredCharacters = Characters;
        var characterTasks = blogPosts.Select(async post =>
        {
            var response = await GetCharactersForPostAsync(post.Id);
            return response.Data;
        });

        var charactersResults = await Task.WhenAll(characterTasks);

        for (int i = 0; i < blogPosts.Count; i++)
        {
            blogPosts[i].Characters = charactersResults[i];
        }
    }

    private async Task OnLogOut()
    {
        blogPosts.Clear();
        StateHasChanged();
    }
}
